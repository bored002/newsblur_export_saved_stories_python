# This is a basic workflow to help you get started with Actions

name: Run Code in Container

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  schedule:
   - cron: '5 1 * * *' #runs at 00:15 UTC everyday
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# permissions:
#    contents: read
#    pages: write
#    id-token: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Run_Python_Scrapper:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 640
    strategy:
      matrix:
        python-version: [3.9] #[3.6, 3.7, 3.8, 3.9]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo content
        uses: actions/checkout@v4
        
      # Setups python script
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      # Runs PIP updade
      - name: Update PIP
        run: python -m pip install --upgrade pip
      
      # Runs requirments install
      - name: Install Requirements
        run: pip install -r requirements.txt # pip install flake8 pytest
        #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
     
      #
      - name: Download previously saved artifacts
        uses: dawidd6/action-download-artifact@v7
        with:
           # Optional, GitHub token
           github_token: ${{secrets.GITHUB_TOKEN}}
           # Required, workflow file name or ID
           workflow: Scheduler.yml
           # Optional, the status or conclusion of a completed workflow to search for
           # Can be one of a workflow conclusion::
           # "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
           # Or a workflow status:
           # "completed", "in_progress", "queued"
           # Default: "completed,success"
           workflow_conclusion: success
           # Optional, will get head commit SHA
           # pr: ${{github.event.pull_request.number}}
           # Optional, no need to specify if PR is
           commit: ${{github.event.pull_request.head.sha}}
           # Optional, will use the branch
           branch: main
           # Optional, defaults to all types
           # event: push
           # Optional, will use specified workflow run
           #run_id: 1122334455
           # Optional, run number from the workflow
           # run_number: 34
           # Optional, uploaded artifact name,
           # will download all artifacts if not specified
           # and extract them in respective subdirectories
           # https://github.com/actions/download-artifact#download-all-artifacts
           name: results-csv
           # Optional, directory where to extract artifact
           path: downloads
           # Optional, defaults to current repo
           repo: ${{github.repository}}
        continue-on-error: true
      
      
      
      # Runs a set of commands using the runners shell
      - name: Execute python script # run the run.py to get the latest data
        run: python main.py ${{ secrets.USER }} ${{ secrets.PASS }}
        env:
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASS }}
      
      - name: Upload updated index.md as artifact
        uses: actions/upload-artifact@v4
        with:
          name: updated-index-page
          path: index.md
          retention-days: 7
          if-no-files-found: error
      
      # Upload execution results
      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: results-csv
          path: output/*.csv
          if-no-files-found: warn
          retention-days: 7
  
  deploy_static_page:
    needs: Run_Python_Scrapper
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download updated index.md
        uses: actions/download-artifact@v4
        with:
          name: updated-index-page
          path: .
          
      # 1. Print the contents of the downloaded index.md
      - name: Verify downloaded Markdown content
        run: |
          echo "--- Contents of index.md after download ---"
          cat index.md
          echo "------------------------------------------"
      
      - name: Install Pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc
          
      - name: Convert Markdown to HTML
        run: |
          # Use pandoc to convert the Markdown file to HTML
          pandoc index.md -o index.html
          # Create the _site directory for deployment
          mkdir _site
          # Move the newly created HTML file into the deployment directory
          mv index.html _site/index.html
          
      # 2. Print the contents of the generated index.html
      - name: Verify generated HTML content
        run: |
          echo "--- Contents of _site/index.html after conversion ---"
          cat _site/index.html
          echo "------------------------------------------------------"
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload Pages artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: _site
          retention-days: 1
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # deploy_jekyll_page:
  #   needs: Run_Python_Scrapper
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
      
  #     - name: Download updated index.md
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: updated-index-page
  #         path: .
      
  #     - name: Verify downloaded index.md content
  #       run: cat index.md
          
  #     - name: Setup Pages
  #       uses: actions/configure-pages@v5

  #     # The jekyll-build-pages action will now use the updated index.md
  #     # and other files directly from the root directory.
  #     - name: Build
  #       uses: actions/jekyll-build-pages@v1
  #       with:
  #         source: .
  #         destination: _site
      
  #     - name: Upload Pages artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: github-pages
  #         path: _site
  #         retention-days: 1
      
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4

  # deploy_jekyll_page:
  #   needs: Run_Python_Scrapper
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: $ {{ steps.deployment.outputs.page_url }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
      
  #     - name: Download updated index.md
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: updated-index-page
  #         path: .

  #     # --- NEW DEBUG STEP: Display content of the index.md in the root ---
  #     - name: Verify downloaded index.md content
  #       run: cat index.md
  #     # -------------------------------------------------------------------
      
  #     - name: List files after artifact download
  #       run: ls -R
      
          
  #     - name: Setup Pages
  #       uses: actions/configure-pages@v5
      
  #     - name: Prepare Jekyll source
  #       run: |
  #         mkdir _jekyll_source
  #         cp index.md _jekyll_source/index.md
  #         cp _config.yml _jekyll_source/_config.yml
  #         if [ -d "assets" ]; then
  #           cp -r assets _jekyll_source/assets
  #         fi
      
  #     - name: Build
  #       uses: actions/jekyll-build-pages@v1
  #       with:
  #         source: .
  #         destination: _site

  #     # - name: Build
  #     #   uses: actions/jekyll-build-pages@v1
  #     #   with:
  #     #     source: .
  #     #     destination: _site

  #     # --- NEW FIX: Delete the source file after the build ---
  #     # - name: Clean up build output
  #     #   run: sudo rm -f _site/index.md
  #     # --------------------------------------------------------

  #     - name: Debug - List _site contents
  #       run: ls -laR _site
      
  #     - name: Upload Pages artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: github-pages
  #         path: _site
  #         retention-days: 1
      
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
        
