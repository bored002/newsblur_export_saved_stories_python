# This is a basic workflow to help you get started with Actions

name: Run Code in Container

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  schedule:
   - cron: '5 1 * * *' #runs at 00:15 UTC everyday
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # get_previous_artifact:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.10] #[3.6, 3.7, 3.8, 3.9]

  #   steps:
  #   # Download Artifacts
  #     - name: Download all workflowartifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: results-csv
  #         path: downloads
    
  #   #Displayy content of folder
  #     - name: Display structure of downloaded files
  #       run: ls -R
  #       working-directory: downloads #path/to/artifact


  build_ubuntu:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9] #[3.6, 3.7, 3.8, 3.9]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo content
        uses: actions/checkout@v3
        
      # Setups python script
      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      
      # Runs PIP updade
      - name: Update PIP
        run: python -m pip install --upgrade pip
      
      # Runs requirments install
      - name: Install Requirements
        run: pip install -r requirements.txt # pip install flake8 pytest
        #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
     
      - name: Download previously saved artifacts
        uses: dawidd6/action-download-artifact@v7
        with:
          # Optional, GitHub token
          github_token: ${{secrets.GITHUB_TOKEN}}
          # Required, workflow file name or ID
          workflow: Scheduler.yml
          # Optional, the status or conclusion of a completed workflow to search for
          # Can be one of a workflow conclusion::
          # "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
          # Or a workflow status:
          # "completed", "in_progress", "queued"
          # Default: "completed,success"
          workflow_conclusion: success
          # Optional, will get head commit SHA
          # pr: ${{github.event.pull_request.number}}
          # Optional, no need to specify if PR is
          commit: ${{github.event.pull_request.head.sha}}
          # Optional, will use the branch
          branch: main
          # Optional, defaults to all types
          # event: push
          # Optional, will use specified workflow run
          #run_id: 1122334455
          # Optional, run number from the workflow
          # run_number: 34
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them in respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          name: results-csv
          # Optional, directory where to extract artifact
          path: downloads
          # Optional, defaults to current repo
          repo: ${{github.repository}}
      
      
      
      # Runs a set of commands using the runners shell
      - name: Execute python script # run the run.py to get the latest data
        run: python main.py ${{ secrets.USER }} ${{ secrets.PASS }}
        env:
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASS }}
      
      # Upload execution results
      - name: Upload CSV artifact
        uses: actions/upload-artifact@v3
        with:
          name: results-csv
          path: output/*.csv
          if-no-files-found: warn
          retention-days: 7
  
  
  
  # name: Deploy Jekyll with GitHub Pages dependencies preinstalled
  
  # on:
  #   # Runs on pushes targeting the default branch
  #   push:
  #     branches: ["main"]
  
  #   # Allows you to run this workflow manually from the Actions tab
  #   workflow_dispatch:
  
  # # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
  # permissions:
  #   contents: read
  #   pages: write
  #   id-token: write
  
  # # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
  # # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
  # concurrency:
  #   group: "pages"
  #   cancel-in-progress: false
  
  # jobs:
  #   # Build job
  #   build:
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Checkout
  #         uses: actions/checkout@v4
  #       - name: Setup Pages
  #         uses: actions/configure-pages@v5
  #       - name: Build with Jekyll
  #         uses: actions/jekyll-build-pages@v1
  #         with:
  #           source: ./
  #           destination: ./_site
  #       - name: Upload artifact
  #         uses: actions/upload-pages-artifact@v3
  
    # Deployment job
    # deploy:
    #   environment:
    #     name: github-pages
    #     url: ${{ steps.deployment.outputs.page_url }}
    #   runs-on: ubuntu-latest
    #   needs: build
    #   steps:
    #     - name: Deploy to GitHub Pages
    #       id: deployment
    #       uses: actions/deploy-pages@v4
  ### OLD Deployment Code
  # deploy-page:
  #   needs: [build_ubuntu]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
      
  #     - name: Download workflow artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: results-csv
  #         path: output

      # Add these debugging steps
      # - name: Debug - List files
      #   run: |
      #     echo "Current directory content:"
      #     ls -la
      #     echo "Output directory content:"
      #     ls -la output || echo "Output directory not found"
          
      # - name: Update index.md
      #   run: |
      #     echo "# Newsblur Export Saved Stories" > index.md
      #     echo "" >> index.md
      #     echo "Last updated: $(date)" >> index.md
      #     echo "" >> index.md
      #     echo "## Latest Results" >> index.md
      #     echo "Files exported in the last run:" >> index.md
      #     echo "\`\`\`" >> index.md
      #     ls -l output/ >> index.md
      #     echo "\`\`\`" >> index.md

      # # Add another debug step here
      # - name: Debug - Verify index.md
      #   run: cat index.md

      # - name: Setup Pages
      #   uses: actions/configure-pages@v4
        
      # - name: Upload artifact
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: '.'
          
      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v4

#TODO: Uncomment it
  # Generate delta gauge chart
  # generate_gauge:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.9]  # Adjust as needed

  #   steps:
  #     - name: Checkout repo content
  #       uses: actions/checkout@v3

  #     - name: Setup python
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: ${{ matrix.python_version }}

  #     - name: Update PIP
  #       run: python -m pip install --upgrade pip

  #     - name: Install Requirements
  #       run: pip install -r requirements.txt

  #     - name: Generate delta gauge chart  
  #       run: |  
  #         # Import libraries
  #         import plotly.graph_objects as go
  #         from your_module import create_delta_gauge_chart  # Import your function

  #         # Define delta and reference values (replace with your logic)
  #         delta_value = 5
  #         reference_value = 100

  #         # Generate delta gauge chart using your function
  #         fig = create_delta_gauge_chart(delta_value, reference_value)

  #         # Optional: Save the figure as an image (for debugging)
  #         # fig.write_image("delta_gauge.png")

  #     - name: Save figure data (optional)
  #       run: |
  #         import pickle
  #         with open('fig.pickle', 'wb') as f:
  #           pickle.dump(fig, f)

  # # Deploy gauge to GitHub Pages
  # deploy_to_pages:
  #   needs: [generate_gauge]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Load figure data
  #       run: |
  #         import pickle
  #         with open('fig.pickle', 'rb') as f:
  #           fig = pickle.load(f)

  #     - name: Generate HTML from gauge chart data
  #       run: |
  #         html_string = fig.to_html(full_html=False)
  #         with open("delta_gauge.html", "w") as f:
  #           f.write(html_string)

  #     - name: Update index.md
  #       run: |
  #         echo "# Delta Gauge Visualization" > index.md
  #         echo "" >> index.md
  #         echo "Last updated: $(date)" >> index.md
  #         echo "" >> index.md
  #         echo "## Delta Gauge" >> index.md
  #         echo "View the delta gauge here: [Delta Gauge](delta_gauge.html)" >> index.md

  #     - name: Setup Pages
  #       uses: actions/configure-pages@v4

  #     - name: Upload content
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: delta-gauge
  #         path: .

  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  


      # Test env vars
#       - name: Hello world
#         run: echo Hello world $USER and $PASS
#         env: 
#           USER: ${{ secrets.USER }}
#           PASS: ${{ secrets.PASS }}
#   build_win:
#     # The type of runner that the job will run on

#     runs-on: windows-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - name: checkout repo content
#         uses: actions/checkout@v2

#       # Setups python script
#       - name: setup python
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{ matrix.python-version }}
      
#       # Runs PIP updade
#       - name: Update PIP
#         run: python -m pip install --upgrade pip
      
#       # Runs requirments install
#       - name: Install Requirements
#         run: pip install -r requirements.txt # pip install flake8 pytest
#         #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#       # Runs a set of commands using the runners shell
#       - name: Execute py script # run the run.py to get the latest data
#         run: python main.py
#         env:
#           username: ${{ secrets.USER }}
#           password: ${{ secrets.PASS }}
